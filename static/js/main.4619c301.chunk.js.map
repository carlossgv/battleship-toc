{"version":3,"sources":["components/Header.js","AppFunctions.js","components/Square.js","components/Gameboard.js","components/Main.js","components/Footer.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","createShip","length","hitPoints","i","push","x","y","hit","position","isSunk","createGameboard","type","array","randomCoordinates","ship","direction","randomDirection","_","random","missedAtttacks","placeShip","coords","receiveAttack","allShipSunked","j","fillBoard","getCoordinatesFromString","stringCoordinates","parseInt","split","grid","carrier","battleship","cruiser","submarine","destroyer","Square","props","secondaryClass","useState","class","clicked","attackHitClass","setAttackHitClass","id","onClick","console","log","e","gameFinished","boardType","target","enemyArray","Object","onChange","Gameboard","squaresArray","board","forEach","row","square","isHitClass","Main","computer","name","sendAttack","enemyPrimaryArray","action","userPrimaryGrid","userTrackingGrid","computerPrimaryGrid","computerTrackingGrid","boards","setBoards","setGameFinished","useEffect","attackCoordinates","computerAttack","domComputerAttack","document","querySelector","classList","remove","contains","add","alert","href","rel","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"qUAYeA,EATA,WACb,OACE,sBAAKC,UAAU,SAAf,UACE,oBAAIA,UAAU,QAAd,wBACA,oBAAIA,UAAU,cAAd,uB,+BCLAC,EAAa,SAACC,GAGlB,IAFA,IAAMC,EAAY,GAETC,EAAI,EAAGA,EAAIF,EAAQE,IAC1BD,EAAUE,KAAK,CACbC,EAAG,GACHC,EAAG,GACHC,KAAK,IAkBT,MAAO,CAAEN,SAAQC,YAAWK,IAdhB,SAACC,GAEX,OADAN,EAAUM,GAAUD,KAAM,EACnBL,GAYwBO,OATlB,SAACP,GACd,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQE,IAC1B,IAAKD,EAAUC,GAAGI,IAChB,OAAO,EAGX,OAAO,KAMLG,EAAkB,SAACC,GACvB,IAAMC,EAAQ,CACZ,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAChE,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,GAAO,IAmD5DC,EAAoB,SAACC,GACzB,IAAIC,EAAY,GACZC,EAAkBC,IAAEC,OAAO,EAAG,GAC9Bb,EAAIY,IAAEC,OAAO,EAAG,GAChBZ,EAAIW,IAAEC,OAAO,EAAG,GAGfH,EADe,IAApBC,EACiB,aACA,WAGjB,IADA,IAAIR,GAAW,GACK,IAAbA,GAAoB,CACzB,GAAkB,eAAdO,EACF,GAAIT,EAAI,GAAKQ,EAAKb,SAA0B,IAAhBW,EAAMP,GAAGC,GAEnCU,EAAkBC,IAAEC,OAAO,EAAG,GAC9Bb,EAAIY,IAAEC,OAAO,EAAG,GAChBZ,EAAIW,IAAEC,OAAO,EAAG,GAEXH,EADe,IAApBC,EACiB,aACA,gBAGjB,IAAK,IAAIb,EAAI,EAAGA,EAAIW,EAAKb,OAAQE,IAC/BK,GAAW,EAKjB,GAAkB,aAAdO,EACF,GAAIV,EAAI,GAAKS,EAAKb,SAA0B,IAAhBW,EAAMP,GAAGC,GAEnCU,EAAkBC,IAAEC,OAAO,EAAG,GAC9Bb,EAAIY,IAAEC,OAAO,EAAG,GAChBZ,EAAIW,IAAEC,OAAO,EAAG,GAEXH,EADe,IAApBC,EACiB,aACA,gBAGjB,IAAK,IAAIb,EAAI,EAAGA,EAAIW,EAAKb,OAAQE,IAC/BK,GAAW,EAMnB,MAAO,CAAEH,IAAGC,IAAGS,cAGjB,MAAO,CACLH,QACAO,eAzFqB,GA0FrBC,UA5EgB,SAACN,GACjB,IAAIO,EAASR,EAAkBC,GAC3BC,EAAYM,EAAON,UACnBV,EAAIgB,EAAOhB,EACXC,EAAIe,EAAOf,EAEf,GAAkB,eAAdS,EACF,IAAK,IAAIZ,EAAI,EAAGA,EAAIW,EAAKb,OAAQE,IAC/BW,EAAKZ,UAAUC,GAAGE,EAAIA,EACtBS,EAAKZ,UAAUC,GAAGG,EAAIH,EAAIG,EAC1BM,EAAMP,GAAGF,EAAIG,GAAKQ,EAAKZ,UAAUC,QAGnC,IAAK,IAAIA,EAAI,EAAGA,EAAIW,EAAKb,OAAQE,IAC/BW,EAAKZ,UAAUC,GAAGE,EAAIF,EAAIE,EAC1BS,EAAKZ,UAAUC,GAAGG,EAAIA,EACtBM,EAAMT,EAAIE,GAAGC,GAAKQ,EAAKZ,UAAUC,GAIrC,MAAO,CAAEE,IAAGC,IAAGS,cAyDfO,cAzFoB,SAACjB,EAAGC,GACxB,OAAKM,EAAMP,GAAGC,GAGa,WAAhBM,EAAMP,GAAGC,KAAuC,IAApBM,EAAMP,GAAGC,GAAGC,MACjDK,EAAMP,GAAGC,GAAGC,KAAM,EACXK,EAAUN,KAJjBM,EAAMP,GAAGC,GAAK,SACP,WAuFTiB,cAvGoB,WACpB,IAAK,IAAIpB,EAAI,EAAGA,EAAIS,EAAMX,OAAQE,IAChC,IAAK,IAAIqB,EAAI,EAAGA,EAAIZ,EAAMT,GAAGF,OAAQuB,IACnC,IAAwB,IAApBZ,EAAMT,GAAGqB,GAAGjB,IACd,OAAO,EAIb,OAAO,GAgGPkB,cAsCEC,EAA2B,SAACC,GAGhC,MAAO,CAFCC,SAASD,EAAkBE,MAAM,KAAK,IACtCD,SAASD,EAAkBE,MAAM,KAAK,MAI1CJ,EAAY,SAACK,GACjB,IAAMC,EAAU/B,EAAW,GACrBgC,EAAahC,EAAW,GACxBiC,EAAUjC,EAAW,GACrBkC,EAAYlC,EAAW,GACvBmC,EAAYnC,EAAW,GAM7B8B,EAAKV,UAAUW,GACfD,EAAKV,UAAUY,GACfF,EAAKV,UAAUa,GACfH,EAAKV,UAAUc,GACfJ,EAAKV,UAAUe,IClKFC,G,MAzCA,SAACC,GACd,IAAIC,EAAiB,GADG,EAIoBC,mBAAS,CACnDC,MAAO,SACPC,SAAS,IANa,mBAIjBC,EAJiB,KAIDC,EAJC,KAUtBL,GADiB,IAAfD,EAAM1B,KACS,cAEA,aAiBnB,OACE,qBACEZ,UAAS,iBAAYuC,EAAZ,YAA8BI,EAAeF,OACtDI,GAAIP,EAAMO,GACVC,QACGH,EAAeD,QAA2BK,QAAQC,IAAIL,GAnBtC,SAACM,GACtB,IAAIX,EAAMY,cAGc,aAApBZ,EAAMa,UAA0B,CAClC,IAAI7B,EAASK,EAAyBsB,EAAEG,OAAOP,IAC3CP,EAAMe,WAAW/B,EAAO,IAAIA,EAAO,cAAegC,OACpDV,EAAkB,CAAEH,MAAO,QAASC,SAAS,IAE7CE,EAAkB,CAAEH,MAAO,SAAUC,SAAS,MAYhDa,SAAUjB,EAAMQ,YCQPU,EA5CG,SAAClB,GACjB,IAAImB,EAAe,GACfnD,EAAI,EAmCR,OA7BAgC,EAAMoB,MAAM7C,MAAM8C,SAAQ,SAACC,GACzB,IAAIrD,EAAI,EACRqD,EAAID,SAAQ,SAACE,GACX,IAAIjD,EAAO,GAKTA,IAHGiD,GAGI,OAGTJ,EAAapD,KACX,cAAC,EAAD,CACE8C,UAAWb,EAAM1B,KAEjBiC,GAAE,UAAKvC,EAAL,YAAUC,GACZqD,IAAKtD,EACLM,KAAMA,EACNkD,WAAYxB,EAAMwB,WAClBT,WAAYf,EAAMe,WAClBH,aAAcZ,EAAMY,cARtB,UAEU5C,EAFV,YAEeC,KASjBA,GAAQ,KAGVD,GAAQ,KAIR,qBAAKN,UAAS,oBAAesC,EAAM1B,KAArB,SAAkCkC,QAASR,EAAMQ,QAA/D,SACGW,KCqEQM,G,MAtGF,WAEX,IAAMC,EH2KC,CAAEC,KA7BI,aG9IiB,WH+IrB,OAEA,WA0BMC,WAvBI,SAACC,GAA6C,IAA1B7D,EAAyB,wDAAdC,EAAc,wDAM9D,IALKD,GAAMC,IACTD,EAAIY,IAAEC,OAAO,EAAG,GAChBZ,EAAIW,IAAEC,OAAO,EAAG,IAIY,WAA5BgD,EAAkB7D,GAAGC,IACrB4D,EAAkB7D,GAAGC,GAAGC,KAExBF,EAAIY,IAAEC,OAAO,EAAG,GAChBZ,EAAIW,IAAEC,OAAO,EAAG,GAGlB,OAAKgD,EAAkB7D,GAAGC,IAIxB4D,EAAkB7D,GAAGC,GAAGC,KAAM,EACvB,CAAEF,EAAGA,EAAGC,EAAGA,EAAG6D,OAAQ,SAJ7BD,EAAkB7D,GAAGC,GAAK,SACnB,CAAED,EAAGA,EAAGC,EAAGA,EAAG6D,OAAQ,aGtKhB,EAIW5B,mBAAS,CACnC6B,gBAAiB1D,IACjB2D,iBAAkB3D,IAClB4D,oBAAqB5D,IACrB6D,qBAAsB7D,MARP,mBAIV8D,EAJU,KAIFC,EAJE,OAWuBlC,oBAAS,GAXhC,mBAWVU,EAXU,KAWIyB,EAXJ,KAajBC,qBAAU,WACRlD,EAAU+C,EAAOJ,iBACjB3C,EAAU+C,EAAOF,qBACjBG,EAAU,CACRL,gBAAiBI,EAAOJ,gBACxBC,iBAAkBG,EAAOH,iBACzBC,oBAAqBE,EAAOF,oBAC5BC,qBAAsBC,EAAOD,yBAE9B,IAmDH,OACE,sBAAKxE,UAAU,OAAf,UACE,sBAAKA,UAAU,aAAf,UACE,cAAC,EAAD,CACEY,KAAM,UACN8C,MAAOe,EAAOJ,gBACdhB,WAAYoB,EAAOD,qBAAqB3D,QAE1C,cAAC,EAAD,CACED,KAAM,WACNsC,aAAcA,EACdQ,MAAOe,EAAOH,iBACdjB,WAAYoB,EAAOF,oBAAoB1D,MACvCiC,QA9DY,SAACG,GACnB,IAAM4B,EAAoBlD,EAAyBsB,EAAEG,OAAOP,IAK5D,GAHAE,QAAQC,IAAI6B,GAEZ9B,QAAQC,IAAIE,IACRA,GAKDuB,EAAOF,oBAAoBhD,cAC1BsD,EAAkB,GAClBA,EAAkB,IAHtB,CASAJ,EAAOF,oBAAoBhD,cACzBsD,EAAkB,GAClBA,EAAkB,IAGpB,IAAMC,EAAiBd,EAASE,WAAWO,EAAOJ,gBAAgBxD,OAGlE,GAAIiE,EAAgB,CAClB,IAAMC,EAAoBC,SAASC,cAAT,4BACHH,EAAexE,EADZ,eACoBwE,EAAevE,IAE7DwE,EAAkBG,UAAUC,OAAO,UAE/BJ,EAAkBG,UAAUE,SAAS,cACvCL,EAAkBG,UAAUG,IAAI,SAEhCN,EAAkBG,UAAUG,IAAI,UAIhCZ,EAAOF,oBAAoB/C,iBAC7BmD,GAAgB,GAChBW,MAAM,aACGb,EAAOJ,gBAAgB7C,kBAChCmD,GAAgB,GAChBW,MAAM,oBAoBN,qBAAKtF,UAAU,gBAAf,SACE,mBACEuF,KAAK,kDACLC,IAAI,aACJpC,OAAO,SAHT,gCC3FOqC,G,MANA,WACb,OACE,qBAAKzF,UAAU,SAAf,sDCUW0F,MAVf,WACE,OACE,sBAAK1F,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCES2F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtB,SAASuB,eAAe,SAM1BZ,M","file":"static/js/main.4619c301.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = () => {\n  return (\n    <div className=\"header\">\n      <h1 className=\"title\">BATTLESHIP</h1>\n      <h2 className=\"silhouettes\">QZ(kh</h2>\n    </div>\n  );\n};\n\nexport default Header;\n","import _ from 'lodash';\n\nconst createShip = (length) => {\n  const hitPoints = [];\n\n  for (let i = 0; i < length; i++) {\n    hitPoints.push({\n      x: '',\n      y: '',\n      hit: false,\n    });\n  }\n\n  const hit = (position) => {\n    hitPoints[position].hit = true;\n    return hitPoints;\n  };\n\n  const isSunk = (hitPoints) => {\n    for (let i = 0; i < length; i++) {\n      if (!hitPoints[i].hit) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  return { length, hitPoints, hit, isSunk };\n};\n\nconst createGameboard = (type) => {\n  const array = [\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n    [false, false, false, false, false, false, false, false, false, false],\n  ];\n\n  const allShipSunked = () => {\n    for (let i = 0; i < array.length; i++) {\n      for (let j = 0; j < array[i].length; j++) {\n        if (array[i][j].hit === false) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  const missedAtttacks = [];\n\n  const receiveAttack = (x, y) => {\n    if (!array[x][y]) {\n      array[x][y] = 'missed';\n      return 'missed';\n    } else if (array[x][y] !== 'missed' && array[x][y].hit !== true) {\n      array[x][y].hit = true;\n      return array[(x, y)];\n    } else {\n      return false;\n    }\n  };\n\n  const placeShip = (ship) => {\n    let coords = randomCoordinates(ship);\n    let direction = coords.direction;\n    let x = coords.x;\n    let y = coords.y;\n\n    if (direction === 'horizontal') {\n      for (let i = 0; i < ship.length; i++) {\n        ship.hitPoints[i].x = x;\n        ship.hitPoints[i].y = i + y;\n        array[x][i + y] = ship.hitPoints[i];\n      }\n    } else {\n      for (let i = 0; i < ship.length; i++) {\n        ship.hitPoints[i].x = i + x;\n        ship.hitPoints[i].y = y;\n        array[i + x][y] = ship.hitPoints[i];\n      }\n    }\n\n    return { x, y, direction };\n  };\n\n  const randomCoordinates = (ship) => {\n    let direction = '';\n    let randomDirection = _.random(0, 1);\n    let x = _.random(0, 9);\n    let y = _.random(0, 9);\n\n    randomDirection === 0\n      ? (direction = 'horizontal')\n      : (direction = 'vertical');\n\n    let position = false;\n    while (position === false) {\n      if (direction === 'horizontal') {\n        if (y > 10 - ship.length || array[x][y] !== false) {\n          // console.log(`cant place ship in ${x},${y}`);\n          randomDirection = _.random(0, 1);\n          x = _.random(0, 9);\n          y = _.random(0, 9);\n          randomDirection === 0\n            ? (direction = 'horizontal')\n            : (direction = 'vertical');\n          // console.log(x, y, direction);\n        } else {\n          for (let i = 0; i < ship.length; i++) {\n            position = true;\n          }\n        }\n      }\n\n      if (direction === 'vertical') {\n        if (x > 10 - ship.length || array[x][y] !== false) {\n          // console.log(`cant place ship in ${x},${y}`);\n          randomDirection = _.random(0, 1);\n          x = _.random(0, 9);\n          y = _.random(0, 9);\n          randomDirection === 0\n            ? (direction = 'horizontal')\n            : (direction = 'vertical');\n          // console.log(x, y, direction);\n        } else {\n          for (let i = 0; i < ship.length; i++) {\n            position = true;\n          }\n        }\n      }\n    }\n    // console.log(x, y, direction);\n    return { x, y, direction };\n  };\n\n  return {\n    array,\n    missedAtttacks,\n    placeShip,\n    receiveAttack,\n    allShipSunked,\n    fillBoard,\n  };\n};\n\nconst createPlayer = (type) => {\n  let name = '';\n  if (type !== 'computer') {\n    name = 'User';\n  } else {\n    name = 'computer';\n  }\n\n  const sendAttack = (enemyPrimaryArray, x = false, y = false) => {\n    if (!x || !y) {\n      x = _.random(0, 9);\n      y = _.random(0, 9);\n    }\n\n    while (\n      enemyPrimaryArray[x][y] === 'missed' ||\n      enemyPrimaryArray[x][y].hit\n    ) {\n      x = _.random(0, 9);\n      y = _.random(0, 9);\n    }\n\n    if (!enemyPrimaryArray[x][y]) {\n      enemyPrimaryArray[x][y] = 'missed';\n      return { x: x, y: y, action: 'missed' };\n    } else {\n      enemyPrimaryArray[x][y].hit = true;\n      return { x: x, y: y, action: 'hit' };\n    }\n  };\n\n  return { name, sendAttack };\n};\n\nconst getCoordinatesFromString = (stringCoordinates) => {\n  let x = parseInt(stringCoordinates.split(',')[0]);\n  let y = parseInt(stringCoordinates.split(',')[1]);\n  return [x, y];\n};\n\nconst fillBoard = (grid) => {\n  const carrier = createShip(5);\n  const battleship = createShip(4);\n  const cruiser = createShip(3);\n  const submarine = createShip(3);\n  const destroyer = createShip(2);\n\n  // // Gameboards setup\n  // const userPrimaryGrid = createGameboard('primary');\n  // const userTrackingGrid = createGameboard('tracking');\n\n  grid.placeShip(carrier);\n  grid.placeShip(battleship);\n  grid.placeShip(cruiser);\n  grid.placeShip(submarine);\n  grid.placeShip(destroyer);\n\n  // const computerPrimaryGrid = createGameboard('primary');\n  // const computerTrackingGrid = createGameboard('tracking');\n\n  // computerPrimaryGrid.placeShip(carrier);\n  // computerPrimaryGrid.placeShip(battleship);\n  // computerPrimaryGrid.placeShip(cruiser);\n  // computerPrimaryGrid.placeShip(submarine);\n  // computerPrimaryGrid.placeShip(destroyer);\n\n  // return array;\n};\n\nexport {\n  createShip,\n  createGameboard,\n  createPlayer,\n  getCoordinatesFromString,\n  fillBoard,\n};\n","import React, { useState } from 'react';\nimport { getCoordinatesFromString } from '../AppFunctions';\nimport './Square.css';\n\nconst Square = (props) => {\n  let secondaryClass = '';\n\n  // CHANGE STATE ON TRACKING BOARD\n  const [attackHitClass, setAttackHitClass] = useState({\n    class: 'notHit',\n    clicked: false,\n  });\n\n  if (props.type === false) {\n    secondaryClass = 'emptySquare';\n  } else {\n    secondaryClass = 'shipSquare';\n  }\n\n  const changeHitClass = (e) => {\n    if (props.gameFinished) {\n      return;\n    }\n    if (props.boardType === 'tracking') {\n      let coords = getCoordinatesFromString(e.target.id);\n      if (props.enemyArray[coords[0]][coords[1]] instanceof Object) {\n        setAttackHitClass({ class: 'isHit', clicked: true });\n      } else {\n        setAttackHitClass({ class: 'isMiss', clicked: true });\n      }\n    }\n  };\n\n  return (\n    <div\n      className={`square ${secondaryClass} ${attackHitClass.class}`}\n      id={props.id}\n      onClick={\n        !attackHitClass.clicked ? changeHitClass : console.log(attackHitClass)\n      }\n      onChange={props.onClick}\n    ></div>\n  );\n};\n\nexport default Square;\n","import React from 'react';\nimport './Gameboard.css';\nimport Square from './Square';\n\nconst Gameboard = (props) => {\n  let squaresArray = [];\n  let x = 0;\n\n  // if (props.type === 'primary') {\n  //   console.log('Regular in gameboard', props.board.array);\n  // }\n\n  props.board.array.forEach((row) => {\n    let y = 0;\n    row.forEach((square) => {\n      let type = '';\n\n      if (!square) {\n        type = false;\n      } else {\n        type = 'ship';\n      }\n\n      squaresArray.push(\n        <Square\n          boardType={props.type}\n          key={`${x},${y}`}\n          id={`${x},${y}`}\n          row={x}\n          type={type}\n          isHitClass={props.isHitClass}\n          enemyArray={props.enemyArray}\n          gameFinished={props.gameFinished}\n        />\n      );\n      y = y + 1;\n    });\n\n    x = x + 1;\n  });\n\n  return (\n    <div className={`gameBoard ${props.type}Board`} onClick={props.onClick}>\n      {squaresArray}\n    </div>\n  );\n};\n\nexport default Gameboard;\n","import React, { useEffect, useState } from 'react';\nimport Gameboard from './Gameboard';\nimport './Main.css';\nimport {\n  createPlayer,\n  getCoordinatesFromString,\n  fillBoard,\n  createGameboard,\n} from '../AppFunctions';\n\nconst Main = () => {\n  // const user = createPlayer('user');\n  const computer = createPlayer('computer');\n\n  const [boards, setBoards] = useState({\n    userPrimaryGrid: createGameboard('primary'),\n    userTrackingGrid: createGameboard('tracking'),\n    computerPrimaryGrid: createGameboard('primary'),\n    computerTrackingGrid: createGameboard('tracking'),\n  });\n\n  const [gameFinished, setGameFinished] = useState(false);\n\n  useEffect(() => {\n    fillBoard(boards.userPrimaryGrid);\n    fillBoard(boards.computerPrimaryGrid);\n    setBoards({\n      userPrimaryGrid: boards.userPrimaryGrid,\n      userTrackingGrid: boards.userTrackingGrid,\n      computerPrimaryGrid: boards.computerPrimaryGrid,\n      computerTrackingGrid: boards.computerTrackingGrid,\n    });\n  }, []);\n\n  const handleClick = (e) => {\n    const attackCoordinates = getCoordinatesFromString(e.target.id);\n\n    console.log(attackCoordinates);\n\n    console.log(gameFinished);\n    if (gameFinished) {\n      return;\n    }\n\n    if (\n      !boards.computerPrimaryGrid.receiveAttack(\n        attackCoordinates[0],\n        attackCoordinates[1]\n      )\n    ) {\n      return;\n    }\n\n    boards.computerPrimaryGrid.receiveAttack(\n      attackCoordinates[0],\n      attackCoordinates[1]\n    );\n\n    const computerAttack = computer.sendAttack(boards.userPrimaryGrid.array);\n\n    // TODO: Check if there is a way to do this inside Square component\n    if (computerAttack) {\n      const domComputerAttack = document.querySelector(\n        `.primaryBoard #\\\\3${computerAttack.x} \\\\,${computerAttack.y}`\n      );\n      domComputerAttack.classList.remove('notHit');\n\n      if (domComputerAttack.classList.contains('shipSquare')) {\n        domComputerAttack.classList.add('isHit');\n      } else {\n        domComputerAttack.classList.add('isMiss');\n      }\n    }\n\n    if (boards.computerPrimaryGrid.allShipSunked()) {\n      setGameFinished(true);\n      alert('YOU WON!');\n    } else if (boards.userPrimaryGrid.allShipSunked()) {\n      setGameFinished(true);\n      alert('YOU LOST');\n    }\n  };\n\n  return (\n    <div className=\"Main\">\n      <div className=\"gameBoards\">\n        <Gameboard\n          type={'primary'}\n          board={boards.userPrimaryGrid}\n          enemyArray={boards.computerTrackingGrid.array}\n        />\n        <Gameboard\n          type={'tracking'}\n          gameFinished={gameFinished}\n          board={boards.userTrackingGrid}\n          enemyArray={boards.computerPrimaryGrid.array}\n          onClick={handleClick}\n        />\n      </div>\n      <div className=\"linkContainer\">\n        <a\n          href=\"https://en.wikipedia.org/wiki/Battleship_(game)\"\n          rel=\"noreferrer\"\n          target=\"_blank\"\n        >\n          How to play\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => {\n  return (\n    <div className=\"Footer\">Carlos González carlossgv@gmail.com</div>\n  );\n};\n\nexport default Footer;\n","import './App.css';\nimport Header from './components/Header';\nimport Main from './components/Main';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Main />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}